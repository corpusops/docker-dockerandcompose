#!/usr/bin/env bash
set -euo pipefail
shopt -s extglob
# Helper to use both inside DIND runners but also for gitlab runners to auth by merging infos
# both from ~/docker/config.json compatible file or also from environment variables
# see https://docs.docker.com/engine/reference/commandline/login/#credentials-store
if ! ( jq --version &>/dev/null; );then echo "nojq";exit 1;fi
# merge $DOCKER_AUTH_CONFIG
# export back to :
#   - ~/.docker/config.json or DOCKER_AUTH_CONFIG_FILE
#   - $DOCKER_AUTH_CONFIG (if you source the script)
# Support also those shorthand variables
# - REGISTRY_[XXX]_HOST / REGISTRY_[XXX]_USER / REGISTRY_[XXX]_PASSWORD
# - DOCKER_REGISTRY / REGISTRY_USER / REGISTRY_PASSWORD
# - DOCKERHUB_USER / DOCKERHUB_PASSWORD
export DOCKER_AUTH_CONFIG="${DOCKER_AUTH_CONFIG-}"
export DOCKER_AUTH_CONFIG_FILE="${DOCKER_AUTH_CONFIG_FILE:-"$HOME/.docker/config.json"}"
export CREDS_AUTH_CONFIG_FILE="${CREDS_AUTH_CONFIG_FILE:-"$HOME/.docker/copsgitlab.config.json"}"
export DOCKER_AUTH_CONFIG_OUT_FILE="${DOCKER_AUTH_CONFIG_OUT_FILE-${CREDS_AUTH_CONFIG_FILE}}"
export DOCKERHUB_PASSWORD="${DOCKERHUB_PASSWORD-}" DOCKERHUB_USER="${DOCKERHUB_USER-}"
export REGISTRY_USER="${REGISTRY_USER-}" REGISTRY_PASSWORD="${REGISTRY_PASSWORD-}" DOCKER_REGISTRY="${DOCKER_REGISTRY-}"
default_json="{}"
json="{}"
merge_json() { jq -rMc ". * $1"; }
print_reg() {
        auth="$(echo "\"$2:$3\""|jq -rMc ".|@base64")"
        echo "{\"auths\": {\"$1\":{\"auth\":\"$auth\"}}}"
}
load_files() {
    for i in $@;do
        if [ -e "$i" ];then
            cfg="$(cat $i)"
            json="$(echo "$json" | merge_json "${cfg:-"{}"}" )"
        fi
    done
}
load_auths() {
    load_files "$CREDS_AUTH_CONFIG_FILE" "$DOCKER_AUTH_CONFIG_FILE"
    if [ "x$DOCKER_AUTH_CONFIG" != "x" ] && (echo "$DOCKER_AUTH_CONFIG"|jq>/dev/null);then
        json="$(echo "$json" | merge_json "$DOCKER_AUTH_CONFIG" )"
    fi
    if [ "x$DOCKERHUB_PASSWORD" != "x" ] && [ "$DOCKERHUB_USER" != "x" ];then
        export REGISTRY_DOCKERHUB_HOST="https://index.docker.io/v1/"
        export REGISTRY_DOCKERHUB_USER="$DOCKERHUB_USER"
        export REGISTRY_DOCKERHUB_PASSWORD="$DOCKERHUB_PASSWORD"
    fi
    if [ "x$REGISTRY_USER" != "x" ] && [ "x$REGISTRY_PASSWORD" != "x" ] && [ "x$DOCKER_REGISTRY" != "x" ];then
        export REGISTRY_DOCKER_HOST="$DOCKER_REGISTRY"
        export REGISTRY_DOCKER_USER="$REGISTRY_USER"
        export REGISTRY_DOCKER_PASSWORD="$REGISTRY_PASSWORD"
    fi
    for envline in $(env|grep -E "^REGISTRY_([^=]+)_PASSWORD=");do
        password="$(echo $envline|sed -re "s/^(REGISTRY_.*_PASSWORD)=(.*)/\2/g")"
        variable="$(echo $envline|sed -re "s/^(REGISTRY_.*_PASSWORD)=(.*)/\1/g")"
        if [ "x${password}" != "x" ];then
            uservariable="$(echo $variable|sed -re "s/PASSWORD$/USER/g")"
            hostvariable="$(echo $variable|sed -re "s/PASSWORD$/HOST/g")"
            password_host="$(eval "echo "\${${hostvariable}-}"")"
            password_user="$(eval "echo "\${${uservariable}-}"")"
            if [ "x${password_user}" = "x" ];then password_user="<token>";fi
            if [ "x${password_host}" != "x" ];then
                json="$( echo "$json"|merge_json "$(print_reg "$password_host" "$password_user" "$password")" )"
            fi
        fi
    done
}
write_json() {
    outfile="${1:-$DOCKER_AUTH_CONFIG_OUT_FILE}"
    if ( echo "$json"|jq &>/dev/null );then
        if [ ! -e "$(dirname "$outfile")" ];then mkdir -p "$(dirname "$outfile")";fi
        echo "$json" | jq > "$outfile"
    fi
}
store() {
    wpayload="$1"
    json="$(echo "$json"|merge_json "$(print_reg \
        "$(echo $wpayload|jq -r .ServerURL)" \
        "$(echo $wpayload|jq -r .Username)" \
        "$(echo $wpayload|jq -r .Secret)")" )" write_json "$DOCKER_AUTH_CONFIG_OUT_FILE"
}
setup() {
    load_auths
    json="$(echo '{"credsStore":"copsgitlab"}'|merge_json "$json")" write_json "$DOCKER_AUTH_CONFIG_FILE"
}
get() {
    gpayload="$1"
    auth="$(echo "$json"|jq -rMc ".auths[\"$gpayload\"].auth"|sed -re "s/^null$//g")"
    if [ "x$auth" != "x" ];then
        dauth="$(echo "\"$auth\""|jq  -rMc '.|@base64d')"
        user="$(echo "$dauth"|sed -re "s/:.*//g")"
        pass="$(echo "$dauth"|sed -re "s/^[^:]+://g")"
        echo '{"Username":"'"$user"'","Secret":"'"$pass"'"}'
    fi
}
erase() {
    :
    # useless as we wont to persist/change anything to system configuration
}
load_auths
case ${1-} in
    setup|init)
        setup "$@"
        ;;
    store|get|erase)
        payload="$(cat -)"
        $1 "$payload"
        ;;
    *)
        echo "usage: setup|store|get|erase" >&2;exit 1
        ;;
esac
# vim:set et sts=4 ts=4 tw=0:
